AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: LLM Retrieval

Parameters:
  OpenAiApiKey:
    Type: String
  PineconeApiKey:
    Type: String
  ProjectName:
    Type: String
    Default: llm-retrieval
  LambdasDirectory:
    Type: String
    Default: ../../functions/aws/lambdas
  LayersDirectory:
    Type: String
    Default: ../../functions/aws/layers
  PartSize:
    Type: Number
    Default: "1048576"
    Description: The size of object parts assigned to each worker.
  PartProcessingChunkSize:
    Type: Number
    Default: "1048576"
    Description: The size of chunks for processing object parts.
  PartProcessingMaxConcurrentBatches:
    Type: Number
    Default: "1000"
    Description: The maximum number of concurrent batches for processing object chunks.
  EmbeddingModel:
    Type: String
    Default: text-embedding-ada-002
    AllowedValues:
      - text-embedding-ada-002
  VectorStoreProvider:
    Type: String
    Default: pinecone
    AllowedValues:
      - pinecone
  PresignedUrlLifetime:
    Type: Number
    Default: "3600"
    Description: The number of seconds for which presigned URLs are valid.
  PineconeEnvironment:
    Type: String
    Description: The Pinecone environment to use.
  PineconeDimension:
    Type: Number
    Description: The dimension of the Pinecone vector store.
  PineconeIndexName:
    Type: String
    Description: The name of the Pinecone index to use.


Resources:
  OpenAiApiKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${ProjectName}-openai-api-key
      SecretString: !Ref OpenAiApiKey

  PineconeApiKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${ProjectName}-pinecone-api-key
      SecretString: !Ref PineconeApiKey

  CommonFunctionLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub ${ProjectName}
      ContentUri: !Sub ${LayersDirectory}/${ProjectName}
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: python3.9

  AwsUtilsFunctionLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub ${ProjectName}-aws-utils
      ContentUri: !Sub ${LayersDirectory}/${ProjectName}-aws-utils
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: python3.9

  UploadNotificationQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${ProjectName}-upload-notification
      # To allow time for the downstream Lambda function(s) to process each batch, set to >(lambda timeout * 6)
      VisibilityTimeout: 300

  UploadNotificationQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref UploadNotificationQueue
      PolicyDocument:
        Id: !Sub ${ProjectName}-upload-notification-policy
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: sqs:SendMessage
            Resource: !GetAtt UploadNotificationQueue.Arn
            Condition:
              ArnLike:
                aws:SourceArn: !Sub arn:aws:s3:::${ProjectName}*

  UploadBucket:
    Type: AWS::S3::Bucket
    DependsOn: UploadNotificationQueuePolicy
    Properties:
      BucketName: !Sub ${ProjectName}-uploads
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - HEAD
            AllowedOrigins:
              # TODO: restrict to the frontend URL
              - "*"
      NotificationConfiguration:
        QueueConfigurations:
          - Queue: !GetAtt UploadNotificationQueue.Arn
            Event: s3:ObjectCreated:*

  GetUploadUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-get-upload-url
      Handler: index.handler
      Runtime: python3.9
      Timeout: 5
      MemorySize: 128
      CodeUri: !Sub ${LambdasDirectory}/get-upload-url
      Layers:
        - !Ref AwsUtilsFunctionLayer
      Environment:
        Variables:
          UPLOAD_BUCKET_NAME: !Ref UploadBucket
          PRESIGNED_URL_LIFETIME: !Ref PresignedUrlLifetime
      Policies:
        - S3WritePolicy:
            BucketName: !Ref UploadBucket
      Events:
        GetUploadUrlApi:
          Type: Api
          Properties:
            Path: /uploadUrl/{objectKey}
            Method: get
            RestApiId: !Ref ApiGateway

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${ProjectName}-api
      StageName: Prod
      DefinitionBody:
        swagger: "2.0"
        info:
          title: !Ref ProjectName
        paths:
          /uploadUrl/{objectKey}:
            get:
              parameters:
                - name: objectKey
                  in: path
                  required: true
                  type: string
              responses: {
                "200": {
                  "description": "Upload URL",
                  "schema": {
                    "type": "object",
                    "properties": {
                      "uploadUrl": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUploadUrlFunction.Arn}/invocations
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                type: "aws_proxy"
                requestParameters:
                  integration.request.path.objectKey: "method.request.path.objectKey"

  HandleUploadNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-handle-upload-notification
      Handler: index.handler
      Runtime: python3.9
      Timeout: 5
      MemorySize: 128
      CodeUri: !Sub ${LambdasDirectory}/handle-upload-notification
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV2:30
        - !Ref AwsUtilsFunctionLayer
        - !Ref CommonFunctionLayer
      Environment:
        Variables:
          UPLOAD_BUCKET_NAME: !Ref UploadBucket
          PART_SIZE: !Ref PartSize
          UNPROCESSED_OBJECT_PART_QUEUE_URL: !GetAtt UnprocessedObjectPartQueue.QueueUrl
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - sqs:ReceiveMessage
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
              Resource: !GetAtt UploadNotificationQueue.Arn
        - S3ReadPolicy:
            BucketName: !Ref UploadBucket
        - SQSSendMessagePolicy:
            QueueName: !GetAtt UnprocessedObjectPartQueue.QueueName
      Events:
        UploadNotificationQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt UploadNotificationQueue.Arn
            BatchSize: 10
            # Note: Lambda may wait up to 20 seconds, even if a smaller batch window is specified.
            MaximumBatchingWindowInSeconds: 10
            ScalingConfig:
              MaximumConcurrency: 10

  UnprocessedObjectPartQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${ProjectName}-unprocessed-object-part
      # To allow time for the downstream Lambda function(s) to process each batch, set to >(lambda timeout * 6 + MaximumBatchingWindowInSeconds)
      VisibilityTimeout: 730

  HandleUnprocessedObjectPartFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-handle-unprocessed-object-part
      Handler: index.handler
      Runtime: python3.9
      Timeout: 120
      MemorySize: 512
      CodeUri: !Sub ${LambdasDirectory}/handle-unprocessed-object-part
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV2:30
        - !Ref AwsUtilsFunctionLayer
        - !Ref CommonFunctionLayer
      Environment:
        Variables:
          CHUNK_SIZE: !Ref PartProcessingChunkSize
          MAX_CONCURRENT_BATCHES: !Ref PartProcessingMaxConcurrentBatches
          EMBEDDING_MODEL_NAME: !Ref EmbeddingModel
          VECTOR_STORE_PROVIDER_NAME: !Ref VectorStoreProvider
          OPENAI_API_KEY_SECRET_ARN: !Ref OpenAiApiKeySecret
          PINECONE_API_KEY_SECRET_ARN: !Ref PineconeApiKeySecret
          PINECONE_ENVIRONMENT: !Ref PineconeEnvironment
          PINECONE_DIMENSION: !Ref PineconeDimension
          PINECONE_INDEX_NAME: !Ref PineconeIndexName
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - sqs:ReceiveMessage
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
              Resource: !GetAtt UnprocessedObjectPartQueue.Arn
        - S3ReadPolicy:
            BucketName: !Ref UploadBucket
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
                - secretsmanager:DescribeSecret
              Resource:
                - !Ref OpenAiApiKeySecret
                - !Ref PineconeApiKeySecret
      Events:
        UnprocessedObjectPartQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt UnprocessedObjectPartQueue.Arn
            BatchSize: 2
            # Note: Lambda may wait up to 20 seconds, even if a smaller batch window is specified.
            MaximumBatchingWindowInSeconds: 10
            ScalingConfig:
              MaximumConcurrency: 100
